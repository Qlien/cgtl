* Implement allocator and hash;
  We already have an allocator for items, we need to implement hash.

* Implement kruskal, prim (minimum spanning tree);

* Implement topological sort;

* Implement strongly connected components;

* Implement multigraph and hypergraph (?): is it realy necessary for now?;
* What should I do when the user tries to insert duplicated vertices or edges? What would STL do?

===

* Implement heap
  - OK, we have a vector and methds to build the heap. Now we need to use it in dijkstra.

* Implement const_iterators;
	- OK, seems to be working.

* Check if an edge already exist before insert it;
	- OK, seems to be working.

* Implement edge and vertex iterators: an easy way to get just the vertex's, or just the edges's values, without take care about the links, the adjacency list, etc.;
	- OK, seems to be working.

* Implement undirected graph: as a type or an attribute to the already existing types;
	- OK.

* Implement depth-first iterator:
	- OK.

* Implement breadth-first iterator;
  - OK.

* Implement dijkstra (single-source shortest path);
  - OK.

